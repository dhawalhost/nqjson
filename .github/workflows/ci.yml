name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Security and vulnerability checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.23.10'
        
    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest
      
    - name: Run vulnerability check
      run: govulncheck ./...

  # Code quality and linting
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.23.10'
        
    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m
        
    - name: Run go vet
      run: go vet ./...
      continue-on-error: true
      
    - name: Run go mod tidy
      run: go mod tidy
      
    - name: Run golangci-lint
      run: golangci-lint run ./...


  # Unit tests with multiple Go versions
  test:
    name: Unit Tests
    strategy:
      matrix:
        os: [ubuntu-latest]
        go-version: ['1.23.10']
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run tests
      run: go test -v -race -timeout 10m ./...
      
    - name: Run tests with coverage
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23.10'
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  # Build verification
  build:
    name: Build Verification
    strategy:
      matrix:
        os: [ubuntu-latest]
        arch: [amd64, arm64]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.23.10'
        
    - name: Build
      env:
        GOOS: ${{ runner.os == 'Linux' && 'linux' }}
        GOARCH: ${{ matrix.arch }}
      run: go build -v ./...
      
    - name: Build examples
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'
      run: |
        go build -o example ./njson_test.go || echo "No main package found"

  # Integration and example verification
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.23.10'
        
    - name: Run example tests
      run: go test -v -run Example
      
    - name: Verify documentation examples
      run: |
        echo "Testing documentation examples..."
        go run -c "
        package main
        import (
          \"fmt\"
          \"os\"
          \"github.com/dhawalhost/njson\"
        )
        func main() {
          // Test basic functionality
          json := []byte(\`{\"name\":\"John\",\"age\":30}\`)
          result := njson.Get(json, \"name\")
          if result.String() != \"John\" {
            fmt.Println(\"Example verification failed\")
            os.Exit(1)
          }
          fmt.Println(\"All examples verified successfully\")
        }" || echo "Skipping documentation verification"

  # Final status check
  status:
    name: CI Status
    if: always()
    needs: [security, lint, test, build, integration]
    runs-on: ubuntu-latest
    steps:
    - name: Check all jobs status
      if: |
        needs.security.result == 'failure' ||
        needs.lint.result == 'failure' ||
        needs.test.result == 'failure' ||
        needs.build.result == 'failure' ||
        needs.integration.result == 'failure'
      run: |
        echo "One or more CI jobs failed"
        exit 1
    - name: All checks passed
      run: echo "All CI checks passed successfully! âœ…"
